<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta http-equiv="X-UA-Compatible" content="IE=edge">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>task 2</title>
</head>
<body>
	<h1>Задача 2</h1>
	<p>Дано інформацію про прибуток К магазинів протягом тижня.</p>
	<script>
// генеруємо двовимірний масив на 7 днів та 7 магазинів
		let randomArr = () =>{
		let arr = []
			for (let i = 0; i < 7; i++) {	
				let arrColumn =[]				
				for (let j = 0; j < 7; j++) {
									
					const min = 1;
					const max = 300;
      			const ranomNum  = min + Math.floor(Math.random() * (max - min + 1));
					arrColumn.push(ranomNum)
				}
				arr.push(arrColumn)
			}
			return arr
		}		
		const income7Stores = JSON.parse(JSON.stringify(randomArr()))
		console.log(income7Stores);

		// знаходимо  прибуток кожного магазину за тиждень

	const sumAllStoresAllDay = income7Stores.reduce((sumIncomeAll, value)=> sumIncomeAll + value.reduce(
		(sumValueOneStore, valueIncomeOneDay)=> sumValueOneStore + valueIncomeOneDay ),0)
		console.log(`прибуток кожного магазину за тиждень${sumAllStoresAllDay}`);

// знаходимо загальний прибуток усіх магазинів по дням (загальний прибуток усіх магазинів за понеділок, за вівторок, і т.д.);

const arrSumAllstore = income7Stores.map((element, index ) => element.reduce((sum,el) => sum + el)
)
	console.log(`загальний прибуток усіх магазинів по дням  ${arrSumAllstore}`);
		
		// загальний прибуток за робочі дні

const getArrSumAllstoreWorkDay = (arr)=>{
	let sumStoreOneday = 0
	let allSum = 0
for (let i = 0; i < 5; i++) {
	for (let j = 0; j < arr[i].length; j++) {
		sumStoreOneday += arr[i][j]
		
	}
	allSum += sumStoreOneday
}
return allSum
}
console.log(`загальний прибуток за робочі дні ${getArrSumAllstoreWorkDay(income7Stores)}`);

//загальний прибуток за вихідні

const getArrSumAllstoreWeekend = (arr)=>{
	let sumStoreOneday = 0
	let allSum = 0
for (let i = 5; i < 7; i++) {
	for (let j = 0; j < arr[i].length; j++) {
		sumStoreOneday += arr[i][j]
		
	}
	allSum += sumStoreOneday
}
return allSum
}
console.log(`загальний прибуток за робочі дні ${getArrSumAllstoreWeekend(income7Stores)}`)

// максимальний прибуток за середу

const incomeForWensday = income7Stores[2]
const maxForWensday = Math.max(...incomeForWensday)
console.log(`Максимальний прибуток за середу ${maxForWensday}`)

//сформувати загальний список (одновимірний масив) зі значенням, які що більші за 200

const newArrIncome7Stores = income7Stores.flat(Infinity)
const arrMore200 = newArrIncome7Stores.filter((element) => element > 200)
console.log('сформувати загальний список (одновимірний масив) зі значенням, які що більші за 200');

console.log(arrMore200);

//відсортувати кожен тиждень за зростанням

const getSortArr = (arr) =>{
	let allSortArr = []
	for (let i = 0; i < arr.length; i++) {
		let sortArr = arr[i].sort((a,b) =>a - b)
		allSortArr.push(sortArr)
	}
	return allSortArr
}
console.log('Відсортувати кожен тиждень за зростанням');

console.log(getSortArr(income7Stores));

// відсортувати тижні (рядки) за спаданням максимального елементи у цьому тижні (рядку), тобто 
//при порівнянні рядків потрібно порівнювати максимальні елементи у кожному з цих рядків
const arrSort = function(arr){
	let allSortArr = []
	for (let i = 0; i < arr.length; i++) {
		let sortArr = arr[i].sort((a,b) =>b - a)
		allSortArr.push(sortArr)
	}
	return allSortArr
}
const sortColumns = arrSort(income7Stores)

const sortRow = (arr) => {
	for (let j = 0; j < arr.length; j++) {
		for (let i = 0; i < arr.length - 1; i++) {
		if(arr[i][0] < arr[i + 1][0]){
			const buff = arr[i]
			arr[i] = arr[i + 1]
			arr[i + 1] = buff
		}		
	}
		
	}
return arr
}
console.log('відсортувати тижні (рядки) за спаданням максимального елементи у цьому тижні');

console.log(sortRow(sortColumns));

// упорядкувати тижні (рядки) за спаданням суми елементів у рядку 
// (тобто при порівнянні двох рядків треба знайти суму кожного з рядків і порівнювати ці суми, на основі цих сум буде зрозуміло, який з елементів повинен іти раніше).

const sortRowSum = (arr) => {
	for (let j = 0; j < arr.length; j++) {
		for (let i = 0; i < arr.length - 1; i++) {
		if(sumRow(arr[i]) < sumRow(arr[i + 1])){
			const buff = arr[i]
			arr[i] = arr[i + 1]
			arr[i + 1] = buff
		}		
	}}
return arr
}
let sumRow = (arr) =>{
let sumEl = arr.reduce((accum, el) => accum + el , 0)
return sumEl
}
console.log('упорядкувати тижні (рядки) за спаданням суми елементів у рядку');

console.log(sortRowSum(income7Stores));
	</script>
</body>
</html>